#
# Generated by xwot compiler.
#
# Klein xwot application.
#
# Type:       xwot:Resource
# Resource:   DisplayResource
# Path:       /display
#

from xwot_app import app
import treq
import json
from xwot.model import Device as XWOTDevice
from xwot.model import BaseModel
from xwot.util import deserialize
from xwot.util.klein import cors
from xwot.util.klein import make_response


class Display(XWOTDevice, BaseModel):

    __expose__ = ['name', 'temp_link', 'hum_link', 'name', 'description']

    def __init__(self):
        super(Display, self).__init__()
        self._dic = {
            'name': 'Display',
            'description': 'Room A410'
        }
        self.add_type('xwot-ext:Display')
        self._proxy_dic = {}
        self.add_link('hum_link')
        self.add_link('temp_link')

    @property
    def resource_path(self):
        return '/display'

    @property
    def name(self):
        return self._dic['name']

    @property
    def description(self):
        return self._dic['description']

    @property
    def hum_link(self):
        return '/display/humidity'

    @property
    def temp_link(self):
        return '/display/temperature'


display = Display()

#
# GET '/display'
#
@app.route('/display', methods=['GET'])
def handle_display_GET(request):
    cors(request, methods=['GET', 'PUT'])
    return make_response(display, request)

#
# PUT '/display'
#
@app.route('/display', methods=['PUT'])
def handle_display_PUT(request):
    content_type = request.getHeader('Content-Type')
    data = request.content.read()
    dic = deserialize(data, content_type)
    display.update(dic, content_type)
    cors(request, methods=['GET', 'PUT'])
    return make_response(display, request)

