#
# Generated by xwot compiler.
#
# Type:       xwot:ContextResource
# Resource:   Ligthbulb
# Path:       /lightbulb
#

from flask import request
import xwot_device
from xwot_device import app

from model import LightBulb
from xwot.util.flask import make_response
from xwot.util import deserialize
import json

CONTENT_TYPES = ['application/json', 'application/ld+json']

lightbulb = LightBulb()

#
# GET '/lightbulb'
#
@xwot_device.annotator.route('lightbulb_get', method='GET', returns=LightBulb,
                             description="Retrieves the context resource of this lightbulb.")
@app.route('/lightbulb', methods=['GET'])
@xwot_device.link
def handle_lightbulb_GET():
    return make_response(lightbulb)

#
# POST '/lightbulb'
#
@xwot_device.annotator.route('lightbulb_post', method='POST', returns=LightBulb, expects=LightBulb,
                             description="Updates the context resource of this lightbulb.",
                             status_codes=[{"code": 200, "description": "If the lightbulb was updated successfully."}])
@app.route('/lightbulb', methods=['POST'])
@xwot_device.link
def handle_lightbulb_POST():
    dic = deserialize(request.data, request.headers.get('content-type'))
    lightbulb.update(dic)

    return make_response(lightbulb)

#
# PUT '/lightbulb'
#
@xwot_device.annotator.route('lightbulb_put', method='PUT', returns=LightBulb, expects=LightBulb,
                             description="Updates the context resource of this lightbulb.",
                             status_codes=[{"code": 200, "description": "If the lightbulb was updated successfully."}])
@app.route('/lightbulb', methods=['PUT'])
@xwot_device.link
def handle_lightbulb_PUT():
    dic = deserialize(request.data, request.headers.get('content-type'))
    lightbulb.update(dic)

    return make_response(lightbulb)

