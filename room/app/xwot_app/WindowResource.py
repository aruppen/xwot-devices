#
# Generated by xwot compiler.
#
# Klein xwot application.
#
# Type:       xwot:Resource
# Resource:   WindowResource
# Path:       /room/window
#

import xwot_app
from xwot_app import app
import treq
import json
from xwot.model import Device as XWOTDevice
from xwot.model import BaseModel
from xwot.util import deserialize


class Window(XWOTDevice, BaseModel):

    __mutable_props__ = ['name']
    __expose__ = __mutable_props__ + ['handle_link', 'lock_link', 'room_link', 'description']

    def __init__(self):
        super(Window, self).__init__()
        self._dic = {
            'name': None,
            'description': None
        }
        self._proxy_dic = {}
        self.add_type('xwot-ext:Window')
        self.add_link('room_link')
        self.add_link('handle_link')
        self.add_link('lock_link')

    @property
    def name(self):
        return self._dic['name']

    @property
    def description(self):
        return self._dic['description']

    @property
    def room_link(self):
        return '/room'

    @property
    def lock_link(self):
        return '/room/window/lock'

    @property
    def handle_link(self):
        return '/room/window/handle'

    @property
    def state(self):
        return self._dic['state']

    def parse(self, data, accept):
        dic = json.loads(data)
        self._proxy_dic = dic
        self._dic['name'] = self._proxy_dic.get('name', None)
        self._dic['description'] = self._proxy_dic.get('description', None)
        return accept

    def serialize(self, content_type):
        if content_type == 'application/json':
            return self.to_json()

        if content_type == 'application/ld+json':
            return self.to_jsonld()

        if content_type == 'application/xml':
            return self.to_xml()

        return None

window = Window()


#
# GET '/room/window'
#
@app.route('/room/window', methods=['GET'])
def handle_room_window_GET(request):
    if xwot_app.resources['window']:
        accept = request.getHeader('Accept')
        d = treq.get(xwot_app.resources['window'], headers={'Accept': 'application/json'})
        request.setHeader('Content-Type', accept)
        d.addCallback(treq.content)
        d.addCallback(window.parse, accept)
        d.addCallback(window.serialize)

        return d
    else:
        request.setResponseCode(404)
    return ''

#
# PUT '/room/window'
#
@app.route('/room/window', methods=['PUT'])
def handle_room_window_PUT(request):
    if xwot_app.resources['window']:
        data = request.content.read()
        content_type = request.getHeader('Content-Type')
        dic = deserialize(data, content_type)
        window.update(dic, content_type)
        _data = window.serialize('application/json')

        accept = request.getHeader('Accept')
        d = treq.put(xwot_app.resources['window'], data=_data, headers={'Content-Type': 'application/json'})
        request.setHeader('Content-Type', accept)
        d.addCallback(treq.content)

        return window.serialize(accept)
    else:
        request.setResponseCode(404)
    return ''